{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/hayder/lighthouse/LHLfinal/final_project/components/qr-scanner.js\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nvar BarcodeScannerExample = function (_React$Component) {\n  _inherits(BarcodeScannerExample, _React$Component);\n\n  function BarcodeScannerExample() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BarcodeScannerExample);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BarcodeScannerExample)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasCameraPermission: null,\n      scanned: false\n    };\n\n    _this.getPermissionsAsync = function _callee() {\n      var _ref, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _ref = _context.sent;\n              status = _ref.status;\n\n              _this.setState({\n                hasCameraPermission: status === 'granted'\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleBarCodeScanned = function (_ref2) {\n      var type = _ref2.type,\n          data = _ref2.data;\n\n      _this.setState({\n        scanned: true\n      });\n\n      alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n    };\n\n    return _this;\n  }\n\n  _createClass(BarcodeScannerExample, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.getPermissionsAsync();\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          hasCameraPermission = _this$state.hasCameraPermission,\n          scanned = _this$state.scanned;\n\n      if (hasCameraPermission === null) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          }\n        }, \"Requesting for camera permission\");\n      }\n\n      if (hasCameraPermission === false) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          }\n        }, \"No access to camera\");\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }, React.createElement(BarCodeScanner, {\n        onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n        style: StyleSheet.absoluteFillObject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        }\n      }), scanned && React.createElement(Button, {\n        title: 'Tap to Scan Again',\n        onPress: function onPress() {\n          return _this2.setState({\n            scanned: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        }\n      }));\n    }\n  }]);\n\n  return BarcodeScannerExample;\n}(React.Component);\n\nexport { BarcodeScannerExample as default };","map":{"version":3,"sources":["/home/hayder/lighthouse/LHLfinal/final_project/components/qr-scanner.js"],"names":["React","Permissions","BarCodeScanner","BarcodeScannerExample","state","hasCameraPermission","scanned","getPermissionsAsync","askAsync","CAMERA","status","setState","handleBarCodeScanned","type","data","alert","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject","Component"],"mappings":";;;;;;;AA4EA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,sBAA/B;;IAEqBC,qB;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,mBAAmB,EAAE,IADf;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;UASRC,mB,GAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKN,WAAW,CAACO,QAAZ,CAAqBP,WAAW,CAACQ,MAAjC,CADL;;AAAA;AAAA;AACZC,cAAAA,MADY,QACZA,MADY;;AAEpB,oBAAKC,QAAL,CAAc;AAAEN,gBAAAA,mBAAmB,EAAEK,MAAM,KAAK;AAAlC,eAAd;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAiCtBE,oB,GAAuB,iBAAoB;AAAA,UAAjBC,IAAiB,SAAjBA,IAAiB;AAAA,UAAXC,IAAW,SAAXA,IAAW;;AACzC,YAAKH,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACAS,MAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;AACD,K;;;;;;;;;;;;AAvCC,mBAAKP,mBAAL;;;;;;;;;;;6BAQO;AAAA;;AAAA,wBACkC,KAAKH,KADvC;AAAA,UACCC,mBADD,eACCA,mBADD;AAAA,UACsBC,OADtB,eACsBA,OADtB;;AAGP,UAAID,mBAAmB,KAAK,IAA5B,EAAkC;AAChC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAP;AACD;;AACD,UAAIA,mBAAmB,KAAK,KAA5B,EAAmC;AACjC,eAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AACD,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLW,UAAAA,IAAI,EAAE,CADD;AAELC,UAAAA,aAAa,EAAE,QAFV;AAGLC,UAAAA,cAAc,EAAE;AAHX,SADT;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,cAAD;AACE,QAAA,gBAAgB,EAAEZ,OAAO,GAAGa,SAAH,GAAe,KAAKP,oBAD/C;AAEE,QAAA,KAAK,EAAEQ,UAAU,CAACC,kBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAWGf,OAAO,IACN,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,mBAAf;AAAoC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACK,QAAL,CAAc;AAAEL,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAN;AAAA,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,QAZJ,CADF;AAiBD;;;;EAzCgDN,KAAK,CAACsB,S;;SAApCnB,qB","sourcesContent":["// import React, { useState, useEffect, Component } from 'react';\n// import { Text, TextInput, View, StyleSheet, Button } from 'react-native';\n// import { BarCodeScanner } from 'expo-barcode-scanner';\n// import axios from 'axios';\n// import { navigation } from \"@react-navigation/stack\";\n\n// export default function App({ navigation: { navigate } }) {\n//   const [hasPermission, setHasPermission] = useState(null);\n//   const [scanned, setScanned] = useState(false);\n\n//   useEffect(() => {\n//     (async () => {\n//       const { status } = await BarCodeScanner.requestPermissionsAsync();\n//       setHasPermission(status === 'granted');\n//     })();\n//   }, []);\n\n//   const handleBarCodeScanned = ({ type, data }) => {\n//     setScanned(true);\n//     axios.get(`https://bugi-api.herokuapp.com/api/product-details`)\n//     .then((response) => {\n//     console.log(\"here\")\n//       console.log(data)\n//     })\n//     .catch((error) => {\n//       console.log(error)\n//     })\n//     navigate(\"ProductsDetails\");\n    \n//     // alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n//   };\n\n//   if (hasPermission === null) {\n//     return <Text>Requesting for camera permission</Text>;\n//   }\n//   if (hasPermission === false) {\n//     return <Text>No access to camera</Text>;\n//   }\n\n//   return (\n//     <View\n//       style={{\n//         display: 'flex',\n//         flex: 1,\n//         flexDirection: 'column',\n//         justifyContent: 'flex-start'\n//       }}>\n//       <BarCodeScanner\n//         onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n//         // style={StyleSheet.absoluteFillObject}\n//         style={{\n//           height: '60%',\n//           width: '100%'\n//         }}\n//       />\n//       <TextInput\n//           style={{\n//             alignSelf: 'center'}}\n//           placeholder=\"Enter barcode\"\n//         />\n//               <Button\n//           style={{\n//             padding: 16,\n//             width: 200,\n//             borderRadius: 24,\n//             alignItems: 'center'\n//           }}\n//       title=\"submit\"\n//       onPress={() => navigate(\"ProductsDetails\")}/>\n\n//       {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n//     </View>\n//   );\n// }\n\n\nimport * as React from 'react';\nimport { Text, View, StyleSheet, Button } from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport default class BarcodeScannerExample extends React.Component {\n  state = {\n    hasCameraPermission: null,\n    scanned: false,\n  };\n\n  async componentDidMount() {\n    this.getPermissionsAsync();\n  }\n\n  getPermissionsAsync = async () => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\n    this.setState({ hasCameraPermission: status === 'granted' });\n  };\n\n  render() {\n    const { hasCameraPermission, scanned } = this.state;\n\n    if (hasCameraPermission === null) {\n      return <Text>Requesting for camera permission</Text>;\n    }\n    if (hasCameraPermission === false) {\n      return <Text>No access to camera</Text>;\n    }\n    return (\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n        }}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n\n        {scanned && (\n          <Button title={'Tap to Scan Again'} onPress={() => this.setState({ scanned: false })} />\n        )}\n      </View>\n    );\n  }\n\n  handleBarCodeScanned = ({ type, data }) => {\n    this.setState({ scanned: true });\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}