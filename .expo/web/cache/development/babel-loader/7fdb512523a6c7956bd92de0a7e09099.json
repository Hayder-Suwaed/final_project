{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from 'react';\nvar state = {\n  cartItems: []\n};\nexport var useGlobal = function useGlobal() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cartItems = _useState2[0],\n      setCartItems = _useState2[1];\n\n  var addToCart = function addToCart(product) {\n    var isNew = true;\n    var updatedCartItems = cartItems.map(function (item) {\n      if (item.upc === product.upc) {\n        isNew = false;\n\n        var existingItem = _objectSpread({}, item);\n\n        existingItem.quantity += 1;\n        existingItem.subTotal += existingItem.unitPrice;\n        return existingItem;\n      }\n\n      return item;\n    });\n\n    if (isNew) {\n      var cartItem = {\n        upc: product.upc,\n        productName: product.name,\n        unitPrice: product.price,\n        qty: 1,\n        subTotal: product.price\n      };\n      updatedCartItems = updatedCartItems.concat(cartItem);\n    }\n\n    state = _objectSpread({}, state, {\n      cartItems: updatedCartItems\n    });\n    setCartItems(updatedCartItems);\n  };\n\n  console.log(\"cartItems in global.js\", cartItems);\n  console.log(\"addtoCart\", addToCart);\n  return {\n    addToCart: addToCart,\n    cartItems: state.cartItems\n  };\n};","map":{"version":3,"sources":["/home/hayder/lighthouse/LHLfinal/final_project/lib/globals.js"],"names":["useState","state","cartItems","useGlobal","setCartItems","addToCart","product","isNew","updatedCartItems","map","item","upc","existingItem","quantity","subTotal","unitPrice","cartItem","productName","name","price","qty","concat","console","log"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACC,IAAIC,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE;AADD,CAAZ;AAGD,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,kBACKH,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,MACtBE,SADsB;AAAA,MACXE,YADW;;AAE7B,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAE7B,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,gBAAgB,GAAGN,SAAS,CAACO,GAAV,CAAc,UAAAC,IAAI,EAAI;AAC3C,UAAIA,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACK,GAAzB,EAA8B;AAC5BJ,QAAAA,KAAK,GAAG,KAAR;;AACA,YAAMK,YAAY,qBAAQF,IAAR,CAAlB;;AACAE,QAAAA,YAAY,CAACC,QAAb,IAAyB,CAAzB;AACAD,QAAAA,YAAY,CAACE,QAAb,IAAyBF,YAAY,CAACG,SAAtC;AACA,eAAOH,YAAP;AACD;;AACD,aAAOF,IAAP;AACD,KATsB,CAAvB;;AAUA,QAAIH,KAAJ,EAAW;AAGT,UAAMS,QAAQ,GAAG;AACfL,QAAAA,GAAG,EAAEL,OAAO,CAACK,GADE;AAEfM,QAAAA,WAAW,EAAEX,OAAO,CAACY,IAFN;AAGfH,QAAAA,SAAS,EAAET,OAAO,CAACa,KAHJ;AAIfC,QAAAA,GAAG,EAAE,CAJU;AAKfN,QAAAA,QAAQ,EAAER,OAAO,CAACa;AALH,OAAjB;AAQAX,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACa,MAAjB,CAAwBL,QAAxB,CAAnB;AACD;;AACDf,IAAAA,KAAK,qBAAQA,KAAR;AAAeC,MAAAA,SAAS,EAAEM;AAA1B,MAAL;AACAJ,IAAAA,YAAY,CAACI,gBAAD,CAAZ;AACD,GA5BD;;AA6BFc,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCrB,SAAtC;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBlB,SAAzB;AACE,SAAO;AACLA,IAAAA,SAAS,EAATA,SADK;AAELH,IAAAA,SAAS,EAAED,KAAK,CAACC;AAFZ,GAAP;AAID,CArCM","sourcesContent":["import { useState } from 'react';\n let state = {\n   cartItems: []\n }\nexport const useGlobal = () => {\n  const [cartItems, setCartItems] = useState([])\n  const addToCart = (product) => {\n    // check if product is already in cart\n    let isNew = true;\n    let updatedCartItems = cartItems.map(item => {\n      if (item.upc === product.upc) {\n        isNew = false;\n        const existingItem = { ...item }\n        existingItem.quantity += 1;\n        existingItem.subTotal += existingItem.unitPrice;\n        return existingItem\n      }\n      return item;\n    });\n    if (isNew) {\n      // transform product to cartItem: { productName, unitPrice, qty, subTotal }\n      // update cart with the new cartItem\n      const cartItem = {\n        upc: product.upc,\n        productName: product.name,\n        unitPrice: product.price,\n        qty: 1,\n        subTotal: product.price\n      }\n      // updatedCartItems = [ ...updatedCartItems, cartItems]\n      updatedCartItems = updatedCartItems.concat(cartItem)\n    }\n    state = { ...state, cartItems: updatedCartItems }\n    setCartItems(updatedCartItems);\n  }\nconsole.log(\"cartItems in global.js\", cartItems);\nconsole.log(\"addtoCart\", addToCart);\n  return {\n    addToCart,\n    cartItems: state.cartItems\n  }\n}"]},"metadata":{},"sourceType":"module"}