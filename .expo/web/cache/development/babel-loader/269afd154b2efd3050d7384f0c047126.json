{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/omeryagoub/lighthouse/final_project/components/qr-scanner.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { navigation } from \"@react-navigation/stack\";\nexport default function App(_ref) {\n  var navigate = _ref.navigation.navigate;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _ref2, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _ref2 = _context.sent;\n              status = _ref2.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref3) {\n    var type = _ref3.type,\n        data = _ref3.data;\n    setScanned(true);\n    axios.get(\"http://bugi-api.herokuapp.com/api/product-details\").then(function (response) {\n      console.log(\"here\");\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    navigate(\"ProductsDetails\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'flex-start'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: {\n      height: '60%',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    }\n  }), React.createElement(TextInput, {\n    style: {\n      alignSelf: 'center'\n    },\n    placeholder: \"Enter barcode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    }\n  }), React.createElement(Button, {\n    style: {\n      padding: 16,\n      width: 200,\n      borderRadius: 24,\n      alignItems: 'center'\n    },\n    title: \"submit\",\n    onPress: function onPress() {\n      return navigate(\"ProductsDetails\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/omeryagoub/lighthouse/final_project/components/qr-scanner.js"],"names":["React","useState","useEffect","Component","BarCodeScanner","navigation","App","navigate","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","axios","get","then","response","console","log","catch","error","display","flex","flexDirection","justifyContent","undefined","height","width","alignSelf","padding","borderRadius","alignItems"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AAEA,eAAe,SAASC,GAAT,OAA2C;AAAA,MAAdC,QAAc,QAA5BF,UAA4B,CAAdE,QAAc;;AAAA,kBACdN,QAAQ,CAAC,IAAD,CADM;AAAA;AAAA,MACjDO,aADiD;AAAA,MAClCC,gBADkC;;AAAA,mBAE1BR,QAAQ,CAAC,KAAD,CAFkB;AAAA;AAAA,MAEjDS,OAFiD;AAAA,MAExCC,UAFwC;;AAIxDT,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BE,cAAc,CAACQ,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,SACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,QAAoB;AAAA,QAAjBC,IAAiB,SAAjBA,IAAiB;AAAA,QAAXC,IAAW,SAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,IAAAA,KAAK,CAACC,GAAN,sDACCC,IADD,CACM,UAACC,QAAD,EAAc;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACED,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,KAJD,EAKCG,KALD,CAKO,UAACC,KAAD,EAAW;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KAPD;AAQAjB,IAAAA,QAAQ,CAAC,iBAAD,CAAR;AAGD,GAbD;;AAeA,MAAIC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLiB,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,IAAI,EAAE,CAFD;AAGLC,MAAAA,aAAa,EAAE,QAHV;AAILC,MAAAA,cAAc,EAAE;AAJX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAElB,OAAO,GAAGmB,SAAH,GAAef,oBAD1C;AAGE,IAAA,KAAK,EAAE;AACLgB,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,KAAK,EAAE;AAFF,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAeE,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE;AACLC,MAAAA,SAAS,EAAE;AADN,KADX;AAGI,IAAA,WAAW,EAAC,eAHhB;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,EAoBU,oBAAC,MAAD;AACJ,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,EADJ;AAELF,MAAAA,KAAK,EAAE,GAFF;AAGLG,MAAAA,YAAY,EAAE,EAHT;AAILC,MAAAA,UAAU,EAAE;AAJP,KADH;AAOR,IAAA,KAAK,EAAC,QAPE;AAQR,IAAA,OAAO,EAAE;AAAA,aAAM5B,QAAQ,CAAC,iBAAD,CAAd;AAAA,KARD;AAAA;AAAA;AAAA;AAAA;AAAA,IApBV,EA8BGG,OAAO,IAAI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,mBAAf;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,IA9Bd,CADF;AAkCD","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\nimport { Text, TextInput, View, StyleSheet, Button } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { navigation } from \"@react-navigation/stack\";\n\nexport default function App({ navigation: { navigate } }) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    axios.get(`http://bugi-api.herokuapp.com/api/product-details`)\n    .then((response) => {\n    console.log(\"here\")\n      console.log(response)\n    })\n    .catch((error) => {\n      console.log(error)\n    })\n    navigate(\"ProductsDetails\");\n    \n    // alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View\n      style={{\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-start'\n      }}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        // style={StyleSheet.absoluteFillObject}\n        style={{\n          height: '60%',\n          width: '100%'\n        }}\n      />\n      <TextInput\n          style={{\n            alignSelf: 'center'}}\n          placeholder=\"Enter barcode\"\n        />\n              <Button\n          style={{\n            padding: 16,\n            width: 200,\n            borderRadius: 24,\n            alignItems: 'center'\n          }}\n      title=\"submit\"\n      onPress={() => navigate(\"ProductsDetails\")}/>\n\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}